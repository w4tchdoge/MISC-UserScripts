// ==UserScript==
// @name           Ellililunch AO3 Bookmark Maker MOD
// @namespace      Ellililunch AO3 Bookmark Maker
// @description    Modified from "Bairdel AO3 Bookmarking Records" this for automatically add title, author, and summary to the bookmark desciption. This should help with record keeping especially with deleted fics. So I can stop going insane. Also adds read date.
// @version        0.15.3
// @author         Ellililunch
// @match          *://archiveofourown.org/works/*
// @match          *://archiveofourown.org/series/*
// @license        GNU GPLv3
// ==/UserScript==

// NOTICE TO NEW USERS
// Format for the autogenerated portion of the bookmark at the bottom of the userscript
// Various settings that can be tweaked by the end user are  near the top (please read the instructions and if you don't understand something, don't hesitate to PM me for clarification)

(function () {

	/* constants that can be changed by the end user to affect how the script functions */

	const main = document.querySelector(`div#main`),    /* add main element that all querySelector operations will be done on */
		divider = `</details>\n\n`,                       /* string which is used to indicate where the bookmark should be split in half */
		autoPrivate = false,                              /* if true, automatically checks the checkbox to private the bookmark */
		simpleWorkSummary = false,                        /* if true, uses the original method to retrieve the work summary (least hassle, but includes the 'Summary' heading element which some users may find annoying); if false, retrieves the work summary in a way that allows more flexibility when customising newBookmarkNotes */
		falseSWS_asBlockquote = true,                     /* if not using the original work summary method, set whether you want to retrieve the summary as a blockquote */
		splitSelect = 1; /* 
splitSelect changes which half of bookmarkNotes your initial bookmark is supposed to live in.
valid values are 0 and 1.

e.g.
if you want the final bookmark (after pasting of autogenerated text) to look like the below text (and have configured it as such at the bottom of the script):

{bookmarkNotes}
<hr />
{title} by {author}<br />
{status}<br />
{summary}<br />

then you can set divider = '<hr />' and splitSelect = 0
what this does is it replaces anything AFTER the <hr /> with the autogenerated bookmark text you've defined at the bottom while keeping your own text (e.g. "@ Chapter 2" or "Chapter 8 ripped my heart out")

if you instead want something like

{title} by {author}<br />
{status}<br />
{summary}<br />
<hr />
{bookmarkNotes}

then you can set divider = '<hr />' and splitSelect = 1, which replaces everything BEFORE your bookmark notes
		*/

	if (autoPrivate) { // for auto-privating your bookmarks
		main.querySelector(`#bookmark_private`).checked = true;
	}


	// keeps any bookmark notes you've made previously
	var bookmarkNotes = main.querySelector(`#bookmark_notes`).textContent.split(divider).at(`-${splitSelect}`);


	////////////////////////// customisations ///////////////////////////////// DO NOT WORRY ABOUT


	// get the current date. should be in local time. you could add HH:MM if you wanted.
	var currdate = new Date(),
		dd = String(currdate.getDate()).padStart(2, `0`),
		mm = String(currdate.getMonth() + 1).padStart(2, `0`), //January is 0
		yyyy = currdate.getFullYear(),
		hh = String(currdate.getHours()).padStart(2, `0`),
		mins = String(currdate.getMinutes()).padStart(2, `0`);

	// change to preferred date format

	var date;
	date = `${yyyy}/${mm}/${dd}`;
	// date = `${yyyy}/${mm}/${dd} ${hh}${mm}hrs`;
	// date = dd + '/' + mm + '/' + yyyy + " " + hh + ":" + mins;
	//date = mm + '/' + dd + '/' + yyyy;    //this is the USA standard date format
	// console.log(date);
	console.log(`
Ellililunch AO3 Bookmark Maker UserScript â€“ Log
--------------------
Date Generated: ${date}`
	);

	var author,
		words,
		status,
		title,
		summary,
		series_notes,
		lastChapter,
		latestChapterNumLength,
		chapNumPadCount;

	/*
	What should it do?
	if story title, author, and info is already there, don't add anything
	if there are bookmark notes but no story info, add story info
	if it's a series, it should get all the titles + summaries?
		i think the class for the series "summary" is notes
		so this would be
		var series_notes;
		series_notes = = document.getElementsByClassName("notes")[0].innerHTML;    // series "summary" attempt
	*/

	// checks if series
	var seriesTrue = document.evaluate(`.//*[@id='main']//span[text()='Series']`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
	if (seriesTrue != undefined) {
		// options for series bookmark notes

		title = main.querySelector(`:scope > h2.heading`).textContent.trim();
		words = document.evaluate(`.//*[@id='main']//dl[contains(concat(' ',normalize-space(@class),' '),' stats ')]//dt[text()='Words:']/following-sibling::*[1]/self::dd`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent;
		author = document.evaluate(`.//*[@id='main']//dl[contains(concat(' ',normalize-space(@class),' '),' series ')][contains(concat(' ',normalize-space(@class),' '),' meta ')][contains(concat(' ',normalize-space(@class),' '),' group ')]//dt[text()='Creator:']/following-sibling::*[1]/self::dd`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent; // fic author
		summary = main.querySelector(`.series.meta.group .userstuff`).innerHTML; // series notes "summary" attempt

		let pub_xp = `//dl[contains(concat(' ',normalize-space(@class),' '),' series ')][contains(concat(' ',normalize-space(@class),' '),' meta ')][contains(concat(' ',normalize-space(@class),' '),' group ')]//dl[contains(concat(' ',normalize-space(@class),' '),' stats ')]//dt[contains(text(), 'Complete')]/following-sibling::*[1]`;
		let complete = document.evaluate(pub_xp, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent;
		var updated = main.querySelector(`.series.meta.group`).getElementsByTagName(`dd`)[2].textContent;
		// var status
		if (complete == `No`) {
			status = `Updated: ${updated}`;
		} else if (complete == `Yes`) {
			status = `Completed: ${updated}`;
		}


	}
	else {
		// options for fics
		latestChapterNumLength = document.evaluate(`.//*[@id='main']//dl[contains(concat(' ',normalize-space(@class),' '),' stats ')]//dt[text()='Chapters:']/following-sibling::*[1]/self::dd`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent.split(`/`).at(0).length;
		if (latestChapterNumLength >= 3) {
			chapNumPadCount = 3;
		}
		else {
			chapNumPadCount = 2;
		}
		// lastChapter = "Chapter " + document.getElementsByClassName("chapters")[1].innerHTML.split("/")[0];
		lastChapter = `Chapter ${document.evaluate(`.//*[@id='main']//dl[contains(concat(' ',normalize-space(@class),' '),' stats ')]//dt[text()='Chapters:']/following-sibling::*[1]/self::dd`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent.split(`/`).at(0).padStart(chapNumPadCount, `0`)}`;
		title = main.querySelector(`#workskin .title.heading`).textContent.trim(); // fic name
		words = document.evaluate(`.//*[@id='main']//dl[contains(concat(' ',normalize-space(@class),' '),' stats ')]//dt[text()='Words:']/following-sibling::*[1]/self::dd`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.textContent; // fic wordcount
		author = main.querySelector(`#workskin > .preface .byline`).textContent.trim(); // fic author

		if (simpleWorkSummary) { // the original methos to retrieve the work's summary
			summary = document.getElementsByClassName(`summary`)[0].innerHTML;

			// example output of the above method:
			// summary will be a var equal to the following string
			// '\n          <h3 class="heading">Summary:</h3>\n            <blockquote class="userstuff">\n              <p>Lorem ipsum dolor...</p>\n            </blockquote>\n        '

		}
		else if (!simpleWorkSummary && falseSWS_asBlockquote) { // new method #1
			summary = main.querySelector(`.summary blockquote`).outerHTML;

			// example output of the above method:
			// summary will be a var equal to the following string
			// '<blockquote class="userstuff">\n              <p>Lorem ipsum dolor...</p>\n            </blockquote>'

		}
		else if (!simpleWorkSummary && !falseSWS_asBlockquote) { // new method #2
			summary = main.querySelector(`.summary blockquote`).innerHTML.trim();

			// example output of the above method:
			// summary will be a var equal to the following string
			// '<p>Lorem ipsum dolor...</p>'

		}


		// status i.e. Completed: 2020-08-23, Updated: 2022-05-08, Published: 2015-06-29
		if (document.getElementsByClassName(`status`).length != 0) {
			// for multichapters
			status = `${main.querySelector(`dt.status`).textContent} ${main.querySelector(`dd.status`).textContent}`;
		}
		else {
			// for single chapter fics
			status = `${main.querySelector(`dt.published`).textContent} ${main.querySelector(`dd.published`).textContent}`;
		}

	}




	/* ///////////////// THIS IS THE BIT FOR YOU TO LOOK AT ///////////////// */
	/*

	puts it all together. feel free to change this format to whatever you like.
	<br> puts the next text on a new line
	options for variables are:
	current date
	current time
	current chapter count of fic / current number of parts in series
	title of fic
	author of fic (note that author "Anonymous" breaks this, but "orphan_account" doesn't
	word count of fic
	status of fic i.e. Completed: 2020-08-23, Updated: 2022-05-08, Published: 2015-06-29

	*/


	/* ////////// examples ////////// */
	/*
	bookmarkNotes = bookmarkNotes + "<br>Last Read: " + date + "<br>Chapter " + lastChapter;
	bookmarkNotes = bookmarkNotes + "<br>Last Read: " + date + "<br>Chapter " + lastChapter + "<br><br>" + title + " by " + author;
	bookmarkNotes + "<br>Last Read: " + date + "<br>" + lastChapter + "<br><br>" + title + " by " + author + "<br>" + status;
	newBookmarkNotes = bookmarkNotes +"<br><br>" + title + " by " + author + "<br>" + summary + "<br>Read: " + date;
	*/


	/* ///////////// SELECT YOU OPTIONS ///////////// */
	//var newBookmarkNotes = title + " by " + author + "<br>" + summary + "Read: " + date + "<br><br>" + bookmarkNotes;    //with current date
	//var newBookmarkNotes = title + " by " + author + "<br>" + summary + "<br><br>" + bookmarkNotes;    //without date for spam making notes

	var newBookmarkNotes = `<details><summary>Work Details</summary>
\t${title} by ${author}
\t${status}
\t<details><summary>Work Summary:</summary>
\t${summary}</details>
(Approximate) Last Read: ${date}</details>

${bookmarkNotes}`;

	// fills in the bookmark notes box.
	document.getElementById("bookmark_notes").innerHTML = newBookmarkNotes;

})();